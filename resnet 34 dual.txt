Train] Class 2: Precision: 0.6047, Recall: 0.6500
[Train] Class 3: Precision: 0.6479, Recall: 0.7667
[Train] Class 4: Precision: 0.6200, Recall: 0.5167
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:09<00:00,  1.02s/ batch] 
[Val] Kappa: 0.8133 Accuracy: 0.6500 Precision: 0.6372 Recall: 0.6500

Epoch 12/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:58<00:00,  2.33s/ batch, lr=1.0e-05, Loss=0.5832] 
[Train] Kappa: 0.8993 Accuracy: 0.8017 Precision: 0.8012 Recall: 0.8017 Loss: 0.5772
[Train] Class 0: Precision: 0.9026, Recall: 0.9778
[Train] Class 1: Precision: 0.8421, Recall: 0.8000
[Train] Class 2: Precision: 0.7453, Recall: 0.6583
[Train] Class 3: Precision: 0.6897, Recall: 0.8333
[Train] Class 4: Precision: 0.7500, Recall: 0.5000
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.55 batch/s] 
[Val] Kappa: 0.8015 Accuracy: 0.6450 Precision: 0.6403 Recall: 0.6450

Epoch 13/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:47<00:00,  1.90s/ batch, lr=1.0e-05, Loss=0.7115] 
[Train] Kappa: 0.9012 Accuracy: 0.8233 Precision: 0.8193 Recall: 0.8233 Loss: 0.5473
[Train] Class 0: Precision: 0.9219, Recall: 0.9833
[Train] Class 1: Precision: 0.8220, Recall: 0.8083
[Train] Class 2: Precision: 0.7699, Recall: 0.7250
[Train] Class 3: Precision: 0.7612, Recall: 0.8500
[Train] Class 4: Precision: 0.7209, Recall: 0.5167
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.53 batch/s] 
[Val] Kappa: 0.7896 Accuracy: 0.6350 Precision: 0.6224 Recall: 0.6350

Epoch 14/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:47<00:00,  1.89s/ batch, lr=1.0e-05, Loss=0.4625] 
[Train] Kappa: 0.9085 Accuracy: 0.8233 Precision: 0.8218 Recall: 0.8233 Loss: 0.5357
[Train] Class 0: Precision: 0.9211, Recall: 0.9722
[Train] Class 1: Precision: 0.8649, Recall: 0.8000
[Train] Class 2: Precision: 0.7521, Recall: 0.7333
[Train] Class 3: Precision: 0.7519, Recall: 0.8083
[Train] Class 4: Precision: 0.7170, Recall: 0.6333
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.53 batch/s] 
[Val] Kappa: 0.8052 Accuracy: 0.6450 Precision: 0.6447 Recall: 0.6450

Epoch 15/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:47<00:00,  1.90s/ batch, lr=1.0e-05, Loss=0.5967] 
[Train] Kappa: 0.9097 Accuracy: 0.8083 Precision: 0.8048 Recall: 0.8083 Loss: 0.5535
[Train] Class 0: Precision: 0.9312, Recall: 0.9778
[Train] Class 1: Precision: 0.8417, Recall: 0.8417
[Train] Class 2: Precision: 0.7411, Recall: 0.6917
[Train] Class 3: Precision: 0.7109, Recall: 0.7583
[Train] Class 4: Precision: 0.6667, Recall: 0.5667
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.53 batch/s] 
[Val] Kappa: 0.7804 Accuracy: 0.6400 Precision: 0.6314 Recall: 0.6400

Epoch 16/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:47<00:00,  1.89s/ batch, lr=1.0e-05, Loss=0.6912] 
[Train] Kappa: 0.9090 Accuracy: 0.8050 Precision: 0.8015 Recall: 0.8050 Loss: 0.5417
[Train] Class 0: Precision: 0.9005, Recall: 0.9556
[Train] Class 1: Precision: 0.7917, Recall: 0.7917
[Train] Class 2: Precision: 0.7257, Recall: 0.6833
[Train] Class 3: Precision: 0.7742, Recall: 0.8000
[Train] Class 4: Precision: 0.7308, Recall: 0.6333
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.53 batch/s] 
[Val] Kappa: 0.7723 Accuracy: 0.6400 Precision: 0.6336 Recall: 0.6400

Epoch 17/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:47<00:00,  1.90s/ batch, lr=1.0e-05, Loss=0.3933] 
[Train] Kappa: 0.9348 Accuracy: 0.8500 Precision: 0.8486 Recall: 0.8500 Loss: 0.4834
[Train] Class 0: Precision: 0.9468, Recall: 0.9889
[Train] Class 1: Precision: 0.8583, Recall: 0.8583
[Train] Class 2: Precision: 0.8000, Recall: 0.7667
[Train] Class 3: Precision: 0.7669, Recall: 0.8500
[Train] Class 4: Precision: 0.7955, Recall: 0.5833
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.53 batch/s] 
[Val] Kappa: 0.7731 Accuracy: 0.6400 Precision: 0.6306 Recall: 0.6400

Epoch 18/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:09<00:00,  2.76s/ batch, lr=1.0e-05, Loss=0.2973] 
[Train] Kappa: 0.9216 Accuracy: 0.8417 Precision: 0.8394 Recall: 0.8417 Loss: 0.4731
[Train] Class 0: Precision: 0.9355, Recall: 0.9667
[Train] Class 1: Precision: 0.8537, Recall: 0.8750
[Train] Class 2: Precision: 0.7719, Recall: 0.7333
[Train] Class 3: Precision: 0.7886, Recall: 0.8083
[Train] Class 4: Precision: 0.7593, Recall: 0.6833
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:09<00:00,  1.04s/ batch] 
[Val] Kappa: 0.8210 Accuracy: 0.6550 Precision: 0.6583 Recall: 0.6550

Epoch 19/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:08<00:00,  2.73s/ batch, lr=1.0e-05, Loss=0.4267] 
[Train] Kappa: 0.9268 Accuracy: 0.8500 Precision: 0.8487 Recall: 0.8500 Loss: 0.4635
[Train] Class 0: Precision: 0.9516, Recall: 0.9833
[Train] Class 1: Precision: 0.8583, Recall: 0.8583
[Train] Class 2: Precision: 0.7542, Recall: 0.7417
[Train] Class 3: Precision: 0.7953, Recall: 0.8417
[Train] Class 4: Precision: 0.8163, Recall: 0.6667
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.09 batch/s] 
[Val] Kappa: 0.8099 Accuracy: 0.6450 Precision: 0.6398 Recall: 0.6450

Epoch 20/20
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:54<00:00,  2.17s/ batch, lr=1.0e-05, Loss=0.4026] 
[Train] Kappa: 0.9173 Accuracy: 0.8417 Precision: 0.8409 Recall: 0.8417 Loss: 0.4470
[Train] Class 0: Precision: 0.9412, Recall: 0.9778
[Train] Class 1: Precision: 0.8632, Recall: 0.8417
[Train] Class 2: Precision: 0.7931, Recall: 0.7667
[Train] Class 3: Precision: 0.7500, Recall: 0.8500
[Train] Class 4: Precision: 0.7727, Recall: 0.5667
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.56 batch/s] 
[Val] Kappa: 0.8098 Accuracy: 0.6450 Precision: 0.6428 Recall: 0.6450
[Val] Best kappa: 0.8216, Epoch 6
c:\Users\Ali Goodarzi\Desktop\deep learning\deep project\521153S-3005-final-project\release\task_c.py:815: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load('./model_1.pth', map_location='cpu')
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.54 batch/s]
[Test] Save predictions to C:\Users\Ali Goodarzi\Desktop\deep learning\deep project\521153S-3005-final-project\release\test_predictions.csv
PS C:\Users\Ali Goodarzi\Desktop\deep learning\deep project\521153S-3005-final-project\release> & "C:/Users/Ali Goodarzi/AppData/Local/Programs/Python/Python312/python.exe" "c:/Users/Ali Goodarzi/Desktop/deep learning/deep project/521153S-3005-final-project/release/task_a.py"
C:\Users\Ali Goodarzi\AppData\Local\Programs\Python\Python312\Lib\site-packages\torchvision\models\_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
C:\Users\Ali Goodarzi\AppData\Local\Programs\Python\Python312\Lib\site-packages\torchvision\models\_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet34_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet34_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
MyDualModel_resnet34(
  (backbone1): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (backbone2): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (3): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (4): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (5): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (2): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
    (fc): Identity()
  )
  (fc): Sequential(
    (0): Linear(in_features=1024, out_features=256, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=256, out_features=128, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=128, out_features=5, bias=True)
  )
)

Pipeline Mode: dual
Device: cpu

Epoch 1/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:44<00:00,  1.78s/ batch, lr=1.0e-04, Loss=1.2410] 
[Train] Kappa: 0.3667 Accuracy: 0.3950 Precision: 0.3273 Recall: 0.3950 Loss: 1.4586
[Train] Class 0: Precision: 0.5255, Recall: 0.8000
[Train] Class 1: Precision: 0.2250, Recall: 0.0750
[Train] Class 2: Precision: 0.3390, Recall: 0.1667
[Train] Class 3: Precision: 0.2844, Recall: 0.5333
[Train] Class 4: Precision: 0.0000, Recall: 0.0000
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.09 batch/s] 
[Val] Kappa: 0.6152 Accuracy: 0.5100 Precision: 0.3653 Recall: 0.5100

Epoch 2/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:52<00:00,  2.10s/ batch, lr=1.0e-04, Loss=1.1934] 
[Train] Kappa: 0.6553 Accuracy: 0.5017 Precision: 0.4425 Recall: 0.5017 Loss: 1.2034
[Train] Class 0: Precision: 0.7261, Recall: 0.9722
[Train] Class 1: Precision: 0.4667, Recall: 0.2333
[Train] Class 2: Precision: 0.3276, Recall: 0.1583
[Train] Class 3: Precision: 0.3292, Recall: 0.6583
[Train] Class 4: Precision: 0.0000, Recall: 0.0000
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.54 batch/s] 
[Val] Kappa: 0.7271 Accuracy: 0.6000 Precision: 0.5602 Recall: 0.6000

Epoch 3/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:49<00:00,  1.96s/ batch, lr=1.0e-04, Loss=1.1027] 
[Train] Kappa: 0.6620 Accuracy: 0.5350 Precision: 0.5010 Recall: 0.5350 Loss: 1.1436
[Train] Class 0: Precision: 0.7854, Recall: 0.9556
[Train] Class 1: Precision: 0.4565, Recall: 0.5250
[Train] Class 2: Precision: 0.2969, Recall: 0.1583
[Train] Class 3: Precision: 0.3736, Recall: 0.5417
[Train] Class 4: Precision: 0.4000, Recall: 0.0333
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:07<00:00,  1.22 batch/s] 
[Val] Kappa: 0.6236 Accuracy: 0.4400 Precision: 0.3987 Recall: 0.4400

Epoch 4/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:59<00:00,  2.39s/ batch, lr=1.0e-04, Loss=1.0072] 
[Train] Kappa: 0.6946 Accuracy: 0.5700 Precision: 0.5888 Recall: 0.5700 Loss: 1.0820
[Train] Class 0: Precision: 0.7719, Recall: 0.9778
[Train] Class 1: Precision: 0.4714, Recall: 0.5500
[Train] Class 2: Precision: 0.3600, Recall: 0.2250
[Train] Class 3: Precision: 0.4545, Recall: 0.5833
[Train] Class 4: Precision: 1.0000, Recall: 0.0500
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:07<00:00,  1.14 batch/s] 
[Val] Kappa: 0.6234 Accuracy: 0.5700 Precision: 0.4777 Recall: 0.5700

Epoch 5/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:56<00:00,  2.25s/ batch, lr=1.0e-04, Loss=0.9041] 
[Train] Kappa: 0.7880 Accuracy: 0.6250 Precision: 0.6129 Recall: 0.6250 Loss: 0.9891
[Train] Class 0: Precision: 0.8325, Recall: 0.9389
[Train] Class 1: Precision: 0.6033, Recall: 0.6083
[Train] Class 2: Precision: 0.4810, Recall: 0.3167
[Train] Class 3: Precision: 0.4813, Recall: 0.7500
[Train] Class 4: Precision: 0.5000, Recall: 0.0833
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:07<00:00,  1.15 batch/s] 
[Val] Kappa: 0.7519 Accuracy: 0.6450 Precision: 0.5920 Recall: 0.6450

Epoch 6/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:08<00:00,  2.74s/ batch, lr=1.0e-04, Loss=0.7305] 
[Train] Kappa: 0.8035 Accuracy: 0.6267 Precision: 0.6008 Recall: 0.6267 Loss: 0.9218
[Train] Class 0: Precision: 0.8537, Recall: 0.9722
[Train] Class 1: Precision: 0.6410, Recall: 0.6250
[Train] Class 2: Precision: 0.4190, Recall: 0.3667
[Train] Class 3: Precision: 0.4872, Recall: 0.6333
[Train] Class 4: Precision: 0.3529, Recall: 0.1000
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.06 batch/s] 
[Val] Kappa: 0.6709 Accuracy: 0.6000 Precision: 0.5627 Recall: 0.6000

Epoch 7/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:09<00:00,  2.76s/ batch, lr=1.0e-04, Loss=0.7299] 
[Train] Kappa: 0.8182 Accuracy: 0.6550 Precision: 0.6425 Recall: 0.6550 Loss: 0.8878
[Train] Class 0: Precision: 0.8687, Recall: 0.9556
[Train] Class 1: Precision: 0.5874, Recall: 0.7000
[Train] Class 2: Precision: 0.5119, Recall: 0.3583
[Train] Class 3: Precision: 0.5342, Recall: 0.6500
[Train] Class 4: Precision: 0.5517, Recall: 0.2667
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.11 batch/s] 
[Val] Kappa: 0.6957 Accuracy: 0.5850 Precision: 0.6135 Recall: 0.5850

Epoch 8/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:56<00:00,  2.25s/ batch, lr=1.0e-04, Loss=0.7429] 
[Train] Kappa: 0.8390 Accuracy: 0.6700 Precision: 0.6568 Recall: 0.6700 Loss: 0.8288
[Train] Class 0: Precision: 0.8788, Recall: 0.9667
[Train] Class 1: Precision: 0.6667, Recall: 0.6667
[Train] Class 2: Precision: 0.5204, Recall: 0.4250
[Train] Class 3: Precision: 0.5364, Recall: 0.6750
[Train] Class 4: Precision: 0.4848, Recall: 0.2667
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:06<00:00,  1.49 batch/s] 
[Val] Kappa: 0.7489 Accuracy: 0.6350 Precision: 0.6863 Recall: 0.6350

Epoch 9/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:02<00:00,  2.51s/ batch, lr=1.0e-04, Loss=0.7240] 
[Train] Kappa: 0.8308 Accuracy: 0.6800 Precision: 0.6687 Recall: 0.6800 Loss: 0.7673
[Train] Class 0: Precision: 0.8650, Recall: 0.9611
[Train] Class 1: Precision: 0.7059, Recall: 0.7000
[Train] Class 2: Precision: 0.5472, Recall: 0.4833
[Train] Class 3: Precision: 0.5338, Recall: 0.6583
[Train] Class 4: Precision: 0.5185, Recall: 0.2333
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.09 batch/s] 
[Val] Kappa: 0.7310 Accuracy: 0.6350 Precision: 0.6576 Recall: 0.6350

Epoch 10/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:06<00:00,  2.65s/ batch, lr=1.0e-04, Loss=0.6991] 
[Train] Kappa: 0.8057 Accuracy: 0.6783 Precision: 0.6660 Recall: 0.6783 Loss: 0.8156
[Train] Class 0: Precision: 0.8724, Recall: 0.9500
[Train] Class 1: Precision: 0.6116, Recall: 0.6167
[Train] Class 2: Precision: 0.6055, Recall: 0.5500
[Train] Class 3: Precision: 0.5755, Recall: 0.6667
[Train] Class 4: Precision: 0.4571, Recall: 0.2667
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.09 batch/s] 
[Val] Kappa: 0.7191 Accuracy: 0.6050 Precision: 0.5836 Recall: 0.6050

Epoch 11/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:07<00:00,  2.71s/ batch, lr=1.0e-05, Loss=0.5205] 
[Train] Kappa: 0.8409 Accuracy: 0.7200 Precision: 0.7106 Recall: 0.7200 Loss: 0.7013
[Train] Class 0: Precision: 0.8700, Recall: 0.9667
[Train] Class 1: Precision: 0.7273, Recall: 0.7333
[Train] Class 2: Precision: 0.5888, Recall: 0.5250
[Train] Class 3: Precision: 0.6232, Recall: 0.7167
[Train] Class 4: Precision: 0.6176, Recall: 0.3500
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.09 batch/s] 
[Val] Kappa: 0.7562 Accuracy: 0.6450 Precision: 0.6707 Recall: 0.6450

Epoch 12/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:05<00:00,  2.60s/ batch, lr=1.0e-05, Loss=0.4178] 
[Train] Kappa: 0.8926 Accuracy: 0.7650 Precision: 0.7606 Recall: 0.7650 Loss: 0.6195
[Train] Class 0: Precision: 0.9171, Recall: 0.9833
[Train] Class 1: Precision: 0.8403, Recall: 0.8333
[Train] Class 2: Precision: 0.6635, Recall: 0.5750
[Train] Class 3: Precision: 0.6111, Recall: 0.7333
[Train] Class 4: Precision: 0.6250, Recall: 0.4167
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.10 batch/s] 
[Val] Kappa: 0.7724 Accuracy: 0.6600 Precision: 0.6885 Recall: 0.6600

Epoch 13/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:06<00:00,  2.66s/ batch, lr=1.0e-05, Loss=0.6464] 
[Train] Kappa: 0.8810 Accuracy: 0.7717 Precision: 0.7677 Recall: 0.7717 Loss: 0.6279
[Train] Class 0: Precision: 0.9309, Recall: 0.9722
[Train] Class 1: Precision: 0.7680, Recall: 0.8000
[Train] Class 2: Precision: 0.6698, Recall: 0.5917
[Train] Class 3: Precision: 0.6667, Recall: 0.8000
[Train] Class 4: Precision: 0.6757, Recall: 0.4167
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:09<00:00,  1.00s/ batch] 
[Val] Kappa: 0.7612 Accuracy: 0.6500 Precision: 0.6730 Recall: 0.6500

Epoch 14/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:07<00:00,  2.70s/ batch, lr=1.0e-05, Loss=0.4665] 
[Train] Kappa: 0.8918 Accuracy: 0.7800 Precision: 0.7753 Recall: 0.7800 Loss: 0.6000
[Train] Class 0: Precision: 0.9202, Recall: 0.9611
[Train] Class 1: Precision: 0.7576, Recall: 0.8333
[Train] Class 2: Precision: 0.7030, Recall: 0.5917
[Train] Class 3: Precision: 0.7054, Recall: 0.7583
[Train] Class 4: Precision: 0.6600, Recall: 0.5500
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:08<00:00,  1.03 batch/s] 
[Val] Kappa: 0.7526 Accuracy: 0.6600 Precision: 0.6900 Recall: 0.6600

Epoch 15/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:03<00:00,  2.56s/ batch, lr=1.0e-05, Loss=0.4064] 
[Train] Kappa: 0.9139 Accuracy: 0.8000 Precision: 0.8026 Recall: 0.8000 Loss: 0.5815
[Train] Class 0: Precision: 0.9271, Recall: 0.9889
[Train] Class 1: Precision: 0.8291, Recall: 0.8083
[Train] Class 2: Precision: 0.7257, Recall: 0.6833
[Train] Class 3: Precision: 0.6711, Recall: 0.8333
[Train] Class 4: Precision: 0.7931, Recall: 0.3833
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.51 batch/s] 
[Val] Kappa: 0.7402 Accuracy: 0.6400 Precision: 0.6352 Recall: 0.6400

Epoch 16/19
Training: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [01:07<00:00,  2.71s/ batch, lr=1.0e-05, Loss=0.4107] 
[Train] Kappa: 0.9028 Accuracy: 0.7950 Precision: 0.7926 Recall: 0.7950 Loss: 0.5770
[Train] Class 0: Precision: 0.9519, Recall: 0.9889
[Train] Class 1: Precision: 0.8145, Recall: 0.8417
[Train] Class 2: Precision: 0.7379, Recall: 0.6333
[Train] Class 3: Precision: 0.6573, Recall: 0.7833
[Train] Class 4: Precision: 0.6512, Recall: 0.4667
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:09<00:00,  1.00s/ batch] 
[Val] Kappa: 0.7629 Accuracy: 0.6500 Precision: 0.6651 Recall: 0.6500

Epoch 17/19
Training: 100%|███████████████████████████████████████████████████████████████████[Train] Kappa: 0.9086 Accuracy: 0.8167 Precision: 0.8168 Recall: 0.8167 Loss: 0.5256
[Train] Class 0: Precision: 0.9617, Recall: 0.9778
[Train] Class 1: Precision: 0.8361, Recall: 0.8500
[Train] Class 2: Precision: 0.7355, Recall: 0.7417
[Train] Class 3: Precision: 0.6917, Recall: 0.7667
[Train] Class 4: Precision: 0.7561, Recall: 0.5167
Evaluating: 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 9/9 [00:05<00:00,  1.53 batch/s]
[Val] Kappa: 0.7347 Accuracy: 0.6300 Precision: 0.6231 Recall: 0.6300

Epoch 18/19
Training:  16%|███████████████████▌                                                                                                      | 4/25 [00:07<00:39,  1.90sTraining:  16%|███████████████████▌                                               
                                                       | 4/25 [00:09<00:39,  1.90sTraining:  20%|████████████████████████▍                                          
                                                       | 5/25 [00:09<00:38,  1.92sTraining:  20%|████████████████████████▍                                          
                                                       | 5/25 [00:11<00:38,  1.92sTraining:  24%|█████████████████████████████▎                                     
                                                       | 6/25 [00:11<00:37,  1.97sTraining:  24%|█████████████████████████████▎                                     
                                                       | 6/25 [00:13<00:37,  1.97sTraining:  28%|██████████████████████████████████▏                                
                                                       | 7/25 [00:13<00:35,  1.96sTraining:  28%|██████████████████████████████████▏                                
                                                       | 7/25 [00:15<00:35,  1.96sTraining:  32%|███████████████████████████████████████                            
                                                       | 8/25 [00:15<00:33,  1.95sTraining:  32%|███████████████████████████████████████                            
                                                       | 8/25 [00:17<00:33,  1.95sTraining:  36%|███████████████████████████████████████████▉                       
                                                       | 9/25 [00:17<00:30,  1.94sTraining:  36%|███████████████████████████████████████████▉                       
                                                       | 9/25 [00:19<00:30,  1.94sTraining:  40%|████████████████████████████████████████████████▍                  
                                                      | 10/25 [00:19<00:28,  1.91sTraining:  40%|████████████████████████████████████████████████▍                  
                                                      | 10/25 [00:21<00:28,  1.91sTraining:  44%|█████████████████████████████████████████████████████▏             
                                                      | 11/25 [00:21<00:26,  1.90sTraining:  44%|█████████████████████████████████████████████████████▏             
                                                      | 11/25 [00:23<00:26,  1.90sTraining:  48%|██████████████████████████████████████████████████████████         
                                                      | 12/25 [00:23<00:24,  1.90sTraining:  48%|██████████████████████████████████████████████████████████         
                                                      | 12/25 [00:24<00:24,  1.90sTraining:  52%|██████████████████████████████████████████████████████████████▉                                                          | 13/25 [00:24<00:22,  1.89sTraining:  52%|██████████████████████████████████████████████████████████████▉                                                          | 13/25 [00:26<00:22,  1.89sTraining:  56%|███████████████████████████████████████████████████████████████████▊                                                     | 14/25 [00:26<00:20,  1.88sTraining:  56%|███████████████████████████████████████████████████████████████████▊                                                     | 14/25 [00:28<00:20,  1.88sTraining:  60%|████████████████████████████████████████████████████████████████████████▌                                                | 15/25 [00:28<00:18,  1.89sTraining:  60%|████████████████████████████████████████████████████████████████████████▌                                                | 15/25 [00:30<00:18,  1.89sTraining:  64%|█████████████████████████████████████████████████████████████████████████████▍                                           | 16/25 [00:30<00:16,  1.88sTraining:  64%|█████████████████████████████████████████████████████████████████████████████▍                                           | 16/25 [00:32<00:16,  1.88sTraining:  68%|██████████████████████████████████████████████████████████████████████████████████▎                                      | 17/25 [00:32<00:15,  1.88sTraining:  68%|██████████████████████████████████████████████████████████████████████████████████▎                                      | 17/25 [00:34<00:15,  1.88sTraining:  72%|███████████████████████████████████████████████████████████████████████████████████████                                  | 18/25 [00:34<00:13,  1.88sTraining:  72%|███████████████████████████████████████████████████████████████████████████████████████                                  | 18/25 [00:36<00:13,  1.88sTraining:  76%|███████████████████████████████████████████████████████████████████████████████████████████▉                             | 19/25 [00:36<00:11,  1.88sTraining:  76%|███████████████████████████████████████████████████████████████████████████████████████████▉                             | 19/25 [00:38<00:11,  1.88sTraining:  80%|████████████████████████████████████████████████████████████████████████████████████████████████▊                        | 20/25 [00:38<00:09,  1.88sTraining:  80%|████████████████████████████████████████████████████████████████████████████████████████████████▊                        | 20/25 [00:39<00:09,  1.88sTraining:  84%|█████████████████████████████████████████████████████████████████████████████████████████████████████▋                   | 21/25 [00:39<00:07,  1.89sTraining:  84%|█████████████████████████████████████████████████████████████████████████████████████████████████████▋                   | 21/25 [00:41<00:07,  1.89sTraining:  88%|██████████████████████████████████████████████████████████████████████████████████████████████████████████▍              | 22/25 [00:41<00:05,  1.89sTraining:  88%|██████████████████████████████████████████████████████████████████████████████████████████████████████████▍              | 22/25 [00:43<00:05,  1.89sTraining:  92%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████▎         | 23/25 [00:43<00:03,  1.89sTraining:  92%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████▎         | 23/25 [00:45<00:03,  1.89sTraining:  96%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏    | 24/25 [00:45<00:01,  1.89sTraining:  96%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▏    | 24/25 [00:47<00:01,  1.89sTraining: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:47<00:00,  1.90sTraining: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 25/25 [00:47<00:00,  1.90s/ batch, lr=1.0e-05, Loss=1.0209]
[Train] Kappa: 0.9128 Accuracy: 0.8333 Precision: 0.8295 Recall: 0.8333 Loss: 0.5118
[Train] Class 0: Precision: 0.9179, Recall: 0.9944
[Train] Class 1: Precision: 0.8839, Recall: 0.8250
[Train] Class 2: Precision: 0.7886, Recall: 0.8083
[Train] Class 3: Precision: 0.7541, Recall: 0.7667
[Train] Class 4: Precision: 0.6875, Recall: 0.5500
Evaluating: 100%|██████████████████████████████| 9/9 [00:05<00:00,  1.54 batch/s] 
[Val] Kappa: 0.7527 Accuracy: 0.6400 Precision: 0.6280 Recall: 0.6400

Epoch 19/19
Training: 100%|█████| 25/25 [00:47<00:00,  1.91s/ batch, lr=1.0e-05, Loss=0.4204] 
[Val] Kappa: 0.7463 Accuracy: 0.6350 Precision: 0.6262 Recall: 0.6350
[Val] Best kappa: 0.7724, Epoch 12
c:\Users\Ali Goodarzi\Desktop\deep learning\deep project\521153S-3005-final-project\release\task_a.py:776: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load('./model_1.pth', map_location='cpu')
Evaluating: 100%|██████████████████████████████| 9/9 [00:05<00:00,  1.59 batch/s]
[Test] Save predictions to C:\Users\Ali Goodarzi\Desktop\deep learning\deep project\521153S-3005-final-project\release\test_predictions.csv
PS C:\Users\Ali Goodarzi\Desktop\deep learning\deep project\521153S-3005-final-project\release> 


